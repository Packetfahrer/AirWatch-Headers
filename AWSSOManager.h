/**
 * This header is generated by class-dump-z 0.2-0.
 * class-dump-z is Copyright (C) 2009 by KennyTM~, licensed under GPLv3.
 *
 * Source: (null)
 */

#import <Foundation/NSObject.h>
#import "AWPasscodeProtocol.h"
#import "AWSSOManagerCommandPollDelegate.h"
#import "AWProfileRetrieverDelegate.h"
#import "AWCommandManagerDelegate.h"
#import "AWSSOStoreProtocol.h"
#import "AWHMACStoreProtocol.h"
#import "AWAccountStoreProtocol.h"

@class AWSSOCommunication, AWMasterKeyStore, AWReachability, AWProfileRetriever, NSDate, AWApplicationAuthenticate, AWStoreManager, AWProfile, NSString;

@interface AWSSOManager : NSObject <AWCommandManagerDelegate, AWSSOManagerCommandPollDelegate, AWProfileRetrieverDelegate, AWPasscodeProtocol, AWSSOStoreProtocol, AWHMACStoreProtocol, AWAccountStoreProtocol> {
	BOOL _isLocked;
	BOOL _isOffLine;
	NSString* _masterKeyContext;
	AWSSOCommunication* _ssoCommunication;
	int _currentState;
	AWProfileRetriever* _sdkProfileRetriever;
	id _callBack;
	BOOL _disableOfflinePoilcy;
	BOOL _disablePasscodePoilcy;
	BOOL _ignoreAgentCheck;
	int _ssoStatus;
	id<AWCommandManagerDelegate> _commandDelegate;
	AWMasterKeyStore* _masterKeyStore;
	AWStoreManager* _storeManager;
	NSString* _callbackScheme;
	NSString* _targetScheme;
	NSDate* _lockInterval;
	AWProfile* _sdkProfile;
	AWReachability* _reachability;
	AWApplicationAuthenticate* _appAuthenticate;
}
@property(retain, nonatomic) AWApplicationAuthenticate* appAuthenticate;
@property(retain, nonatomic) AWReachability* reachability;
@property(retain, nonatomic) AWProfile* sdkProfile;
@property(retain, nonatomic) NSDate* lockInterval;
@property(assign, nonatomic) BOOL ignoreAgentCheck;
@property(assign, nonatomic) BOOL disablePasscodePoilcy;
@property(assign, nonatomic) BOOL disableOfflinePoilcy;
@property(retain, nonatomic) NSString* targetScheme;
@property(retain, nonatomic) NSString* callbackScheme;
@property(assign, nonatomic) int ssoStatus;
@property(retain, nonatomic) AWStoreManager* storeManager;
@property(retain, nonatomic) AWMasterKeyStore* masterKeyStore;
@property(assign, nonatomic) id<AWCommandManagerDelegate> commandDelegate;
-(id)errorObjectForErrorCode:(int)errorCode;
-(BOOL)entryExistsForAccount:(id)account;
-(BOOL)setCertificateForAccount:(id)account account:(id)account2;
-(id)certificateForAccount:(id)account;
-(void)clear;
-(id)storeEncryptionKey;
-(id)hmac;
-(id)account;
-(id)sessionInfo;
-(void)saveSessionInfo:(id)info;
-(BOOL)saveAccount:(id)account;
-(id)nonSharedHMAC;
-(BOOL)saveNonSharedHMAC:(id)hmac;
-(BOOL)saveHMAC:(id)hmac;
-(void)executeCallBackWithProfile:(id)profile error:(id)error;
-(void)returnEmptyProfileWithError:(id)error;
-(void)setManagedMode;
-(void)setUmanagedMode;
-(BOOL)processURL:(id)url;
-(void)checkAndApplyProfile:(id)profile;
-(void)profileRetriever:(id)retriever succeededWithResponseData:(id)responseData;
-(void)profileRetriever:(id)retriever failedWithError:(id)error;
-(void)fetchProfileForURL:(id)url;
-(void)checkWithURL:(id)url handler:(id)handler;
-(id)brokerAppScheme;
-(id)agentScheme;
-(BOOL)canUseAgent;
-(BOOL)canUseWorkspace;
-(int)checkState;
-(void)setAppIsRegistered:(BOOL)registered;
-(BOOL)appIsRegistered;
-(void)sendRenewSessionRequest;
-(void)sendRenewHMACRequest;
-(void)sendAppRegisterRequest;
-(void)sendPinRequest;
-(void)changeToPin:(id)pin fromPin:(id)pin2 handler:(id)handler;
-(void)setUpWithPin:(id)pin handler:(id)handler;
-(BOOL)unlockWithPin:(id)pin;
-(id)storedPin;
-(BOOL)verifyPin:(id)pin;
-(void)onActiveNotification:(id)notification;
-(void)offlineStatusChange:(id)change;
-(void)loadCommands;
-(void)commandManagerStartedReceivingCommands:(id)commands;
-(void)commandManagerFinishedReceivingCommands:(id)commands;
-(void)commandManager:(id)manager failedWithError:(id)error;
-(id)responseForCommand:(id)command;
-(BOOL)canHandleCommandType:(int)type;
-(BOOL)isSSOMode;
-(BOOL)isLocked;
-(void)checkPasscodeCompliance;
-(BOOL)saveClearPasscodeTimeStamp;
-(void)executeClearPasscodeWithTimeStamp:(id)timeStamp;
-(BOOL)clearPasscodeWithTimeStamp:(id)timeStamp;
-(BOOL)lockWithTimeStampLocal;
-(void)executeLockWithTimeStamp:(id)timeStamp;
-(BOOL)lockWithTimeStamp:(id)timeStamp;
-(void)lock;
-(void)wipePreservePasscode;
-(void)wipe;
-(void)sendURL:(id)url;
-(int)defaultErrorCodeForType:(int)type;
-(id)methodFromType:(int)type;
-(int)typeFromMethod:(id)method;
-(int)typeFromURL:(id)url;
-(void)dealloc;
-(void)checkAndSetUniqueIndentifier;
-(id)init;
@end

